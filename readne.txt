src/
  assets/
    plus.svg
    styles.css
    trust.png
  components/
    Calendar/
      Calendar.js
      CalendarEvent.js
      CalendarHeader.js
      CreateEventButton.js
      CreateModal.js
      CustomCalendar.js
      Day.js
      DayView.js
      EventModal.js
      Labels.js
      Month.js
      SmallCalendar.js
      WeekView.js
      YearView.js
    Common/
      Button.js
      Input.js
      Modal.js
      Dropdown.js
    Venues/
      VenueModal.js
      Venues.js
    Tasks/
      TaskModal.js
    ViewSwitcher/
      ViewSwitcherDropdown.js
      ViewSwitcherDropdown.css
  context/
    ContextWrapper.js
    GlobalContext.js
  hooks/
    useCalendar.js
    useTasks.js
    useVenues.js
  utils/
    dateUtils.js
    storageUtils.js
  App.css
  App.js
  App.test.js
  index.css
  index.js
  reportWebVitals.js
  setupTests.js

??need to fix day view task issue where task click doesnt work.

========================================GlobalContext==============================
import axios from "axios";

const API_BASE_URL = "http://localhost:8000/api"; // Replace with your backend URL

const savedTasksReducer = async (state, { type, payload }) => {
  switch (type) {
    case "push":
      try {
        const response = await axios.post(`${API_BASE_URL}/tasks/`, payload);
        return [...state, response.data];
      } catch (error) {
        console.error("Error creating task:", error);
        return state;
      }
    case "update":
      try {
        const response = await axios.put(`${API_BASE_URL}/tasks/${payload.id}/`, payload);
        return state.map((task) => (task.id === payload.id ? response.data : task));
      } catch (error) {
        console.error("Error updating task:", error);
        return state;
      }
    case "delete":
      try {
        await axios.delete(`${API_BASE_URL}/tasks/${payload.id}/`);
        return state.filter((task) => task.id !== payload.id);
      } catch (error) {
        console.error("Error deleting task:", error);
        return state;
      }
    default:
      throw new Error();
  }
};

const savedEventsReducer = async (state, { type, payload }) => {
  switch (type) {
    case "push":
      try {
        const response = await axios.post(`${API_BASE_URL}/events/`, payload);
        return [...state, response.data];
      } catch (error) {
        console.error("Error creating event:", error);
        return state;
      }
    case "update":
      try {
        const response = await axios.put(`${API_BASE_URL}/events/${payload.id}/`, payload);
        return state.map((evt) => (evt.id === payload.id ? response.data : evt));
      } catch (error) {
        console.error("Error updating event:", error);
        return state;
      }
    case "delete":
      try {
        await axios.delete(`${API_BASE_URL}/events/${payload.id}/`);
        return state.filter((evt) => evt.id !== payload.id);
      } catch (error) {
        console.error("Error deleting event:", error);
        return state;
      }
    default:
      throw new Error();
  }
};

const savedVenuesReducer = async (state, { type, payload }) => {
  switch (type) {
    case "push":
      try {
        const response = await axios.post(`${API_BASE_URL}/venues/`, payload);
        return [...state, response.data];
      } catch (error) {
        console.error("Error creating venue:", error);
        return state;
      }
    case "update":
      try {
        const response = await axios.put(`${API_BASE_URL}/venues/${payload.id}/`, payload);
        return state.map((venue) => (venue.id === payload.id ? response.data : venue));
      } catch (error) {
        console.error("Error updating venue:", error);
        return state;
      }
    case "delete":
      try {
        await axios.delete(`${API_BASE_URL}/venues/${payload.id}/`);
        return state.filter((venue) => venue.id !== payload.id);
      } catch (error) {
        console.error("Error deleting venue:", error);
        return state;
      }
    default:
      throw new Error();
  }
};
 ==================================Initialize Data from API===========================
 const initEvents = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/events/`);
    return response.data;
  } catch (error) {
    console.error("Error fetching events:", error);
    return [];
  }
};

const initTasks = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/tasks/`);
    return response.data;
  } catch (error) {
    console.error("Error fetching tasks:", error);
    return [];
  }
};

const initVenues = async () => {
  try {
    const response = await axios.get(`${API_BASE_URL}/venues/`);
    return response.data;
  } catch (error) {
    console.error("Error fetching venues:", error);
    return [];
  }
};
===================================Update useEffect Hooks=====================
useEffect(() => {
  const fetchData = async () => {
    const events = await initEvents();
    const tasks = await initTasks();
    const venues = await initVenues();
    dispatchCalEvent({ type: "init", payload: events });
    dispatchCalTask({ type: "init", payload: tasks });
    dispatchCalVenue({ type: "init", payload: venues });
  };
  fetchData();
}, []);